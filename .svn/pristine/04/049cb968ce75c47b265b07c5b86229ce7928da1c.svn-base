<?php

namespace app\admin\controller;

use app\common\Api;
use app\common\GameLog;
use redis\Redis;
use socket\QuerySocket;

class Player extends Main
{
    /**
     * 在线玩家
     */
    public function online()
    {
        if ($this->request->isAjax()) {
            $page    = intval(input('page')) ? intval(input('page')) : 1;
            $limit   = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId  = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $roomId  = intval(input('roomid')) ? intval(input('roomid')) : 0;
            $orderby = intval(input('orderby')) ? intval(input('orderby')) : 0;
            $asc     = intval(input('asc')) ? intval(input('asc')) : 0;

            $res = Api::getInstance()->sendRequest([
                'roleid'   => $roleId,
                'roomid'   => $roomId,
                'orderby'  => $orderby,
                'page'     => $page,
                'asc'      => $asc,
                'pagesize' => $limit
            ], 'player', 'online');
            if ($res['data']) {
                foreach ($res['data'] as &$v) {
                    //盈利
                    $v['totalget'] = $v['totalin'] - $v['totalout'];
                    //活跃度
                    $v['huoyue'] = $v['totalin'] != 0 ? round($v['totalwater'] / $v['totalin'], 2) : 0;
                }
                unset($v);
            }
            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);

        }
        $selectData = $this->getRoomList();
        $this->assign('selectData', $selectData);
        return $this->fetch();
    }

    /**
     * * Notes: 返回前端select标签里的内容
     * @return mixed
     */
    public function getRoomList()
    {
        $res = Api::getInstance()->sendRequest([
            'id' => 0
        ], 'room', 'kind');
        return $res['data'];
    }


    /**
     * 所有玩家
     */
    public function all()
    {
        if ($this->request->isAjax()) {
            $page    = intval(input('page')) ? intval(input('page')) : 1;
            $limit   = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId  = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $roomId  = intval(input('roomid')) ? intval(input('roomid')) : 0;
            $orderby = intval(input('orderby')) ? intval(input('orderby')) : 0;
            $asc     = intval(input('asc')) ? intval(input('asc')) : 0;

            $res = Api::getInstance()->sendRequest([
                'roleid'   => $roleId,
                'roomid'   => $roomId,
                'orderby'  => $orderby,
                'page'     => $page,
                'asc'      => $asc,
                'pagesize' => $limit
            ], 'player', 'all');
            if ($res['data']) {
                foreach ($res['data'] as &$v) {
                    //盈利
                    $v['totalget'] = $v['totalin'] - $v['totalout'];
                    //活跃度
                    $v['huoyue'] = $v['totalin'] != 0 ? round($v['totalwater'] / $v['totalin'], 2) : 0;
                }
                unset($v);
            }

            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);

        }
        $selectData = $this->getRoomList();
        $this->assign('selectData', $selectData);
        return $this->fetch();
    }

    /**
     * 游戏日志(玩家列表点击)
     */
    public function gameLog()
    {
        if ($this->request->isAjax()) {
            $page       = intval(input('page')) ? intval(input('page')) : 1;
            $limit      = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId     = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $roomid     = intval(input('roomid')) ? intval(input('roomid')) : 0;
            $strartdate = input('strartdate') ? input('strartdate') : '';
            $enddate    = input('enddate') ? input('enddate') : '';
            $winlost    = intval(input('winlost')) >=0 ? intval(input('winlost')) : -1;
            $res = Api::getInstance()->sendRequest([
                'roleid'     => $roleId,
                'roomid'     => $roomid,
                'strartdate' => $strartdate,
                'enddate'    => $enddate,
                'page'       => $page,
                'winlost'    => $winlost,
                'pagesize'   => $limit
            ], 'player', 'game');

            foreach ($res['data'] as &$v) {
                $v['premoney'] = $v['lastmoney'] - $v['money'];
            }
            unset($v);
            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
        }

        $roleId = intval(input('roleid')) ? intval(input('roleid')) : 0;
        $selectData = $this->getRoomList();
        $this->assign('selectData', $selectData);
        $this->assign('roleid', $roleId);
        return $this->fetch();
    }



    /**
     * 玩家详情(玩家列表点击)
     */
    public function playerDetail()
    {
        if ($this->request->isAjax()) {

        }

        $roleId = intval(input('roleid')) ? intval(input('roleid')) : 0;
        $selectData = $this->getRoomList();
        $res = Api::getInstance()->sendRequest([
//            'Id' => '56103750'
            'Id' => $roleId
        ], 'player', 'getbank');
        $bankname=config('site.bank');
        if($res['data']){
            $this->assign('username', $res['data']['username'] );
            $this->assign('roleid', $res['data']['roleid']);
            $this->assign('bankcardno', $res['data']['bankcardno']);
            $this->assign('bankname3', $res['data']['bankname']);
        }else{
            $this->assign('username', '');
            $this->assign('roleid', $roleId);
//            $this->assign('roleid', '');
            $this->assign('bankcardno', '');
            $this->assign('bankname3', '');
        }

        $this->assign('bankname', $bankname);

        return $this->fetch();
    }

    /**
     * 更新银行卡
     */
    public function updatebank()
    {
        if ($this->request->isAjax()) {
            $request = $this->request->request();
            $updadata=[
                'roleid' => input('roleid') ? input('roleid') : '',
                'username' => input('username') ? input('username') : '',
                'bankcardno' =>input('bankcardno') ? input('bankcardno') : '',
                'bankname' => input('bankname') ? input('bankname') : '',
            ];

            $res     = Api::getInstance()->sendRequest($updadata, 'player', 'updatebank');
            //log记录
            GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
            return $this->apiReturn($res['code'], $res['data'], $res['message']);
        }
        return $this->fetch();
    }


    /**
     * Notes: 游戏日志（单独菜单）
     * @return mixed
     */
    public function gamelog2()
    {
        if ($this->request->isAjax()) {
            $page       = intval(input('page')) ? intval(input('page')) : 1;
            $limit      = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId     = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $roomid     = intval(input('roomid')) ? intval(input('roomid')) : 0;
            $strartdate = input('strartdate') ? input('strartdate') : '';
            $enddate    = input('enddate') ? input('enddate') : '';
            $winlost    = intval(input('winlost')) >=0 ? intval(input('winlost')) : -1;
            $res = Api::getInstance()->sendRequest([
                'roleid'     => $roleId,
                'roomid'     => $roomid,
                'strartdate' => $strartdate,
                'enddate'    => $enddate,
                'page'       => $page,
                'winlost'    => $winlost,
                'pagesize'   => $limit
            ], 'player', 'game');

            foreach ($res['data'] as &$v) {
                $v['premoney'] = $v['lastmoney'] - $v['money'];
            }
            unset($v);

            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
        }

        $selectData = $this->getRoomList();
        $this->assign('selectData', $selectData);
        return $this->fetch();
    }

    /**
     * 金币日志
     */
    public function coinLog()
    {
        $changeType = config('site.bank_change_type');
        if ($this->request->isAjax()) {
            $page   = intval(input('page')) ? intval(input('page')) : 1;
            $limit  = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $start  = input('start') ? input('start') : '';
            $kindid = intval(input('kindid')) ? intval(input('kindid')) : 0;
            $result = intval(input('result')) ? intval(input('result')) : -1;

            $res = Api::getInstance()->sendRequest([
                'roleid'   => $roleId,
                'roomid'   => 0,
                'orderby'  => 0,
                'page'     => $page,
                'asc'      => 0,
                'pagesize' => $limit
            ], 'player', 'coin');
            foreach ($res['data'] as &$v) {
                $v['premoney'] = $v['balance'] - $v['changemoney'];
                foreach ($changeType as $k2 => $v2) {
                    if ($v['changetype'] == $k2) {
                        $v['changename'] = $v2;
                        break;
                    }
                }
            }
            unset($v);
            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
        }

        $roleId = intval(input('roleid')) ? intval(input('roleid')) : 0;
        $this->assign('roleid', $roleId);
        $this->assign('changeType', $changeType);
        return $this->fetch();
    }

    /**
     * Notes: 金币日志（单独菜单）
     * @return mixed
     */
    public function coinlog2()
    {
        $changeType = config('site.bank_change_type');
        if ($this->request->isAjax()) {
            $page       = intval(input('page')) ? intval(input('page')) : 1;
            $limit      = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId     = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $strartdate = input('strartdate') ? input('strartdate') : '';
            $enddate    = input('enddate') ? input('enddate') : '';
            $changetype    = intval(input('changetype')) ? intval(input('changetype')) : 0;
            $res = Api::getInstance()->sendRequest([
                'roleid'     => $roleId,
                'strartdate' => $strartdate,
                'enddate'    => $enddate,
                'page'       => $page,
                'changetype' => $changetype,
                'pagesize'   => $limit
            ], 'player', 'coin');

            foreach ($res['data']['list'] as &$v) {
                $v['premoney'] = $v['balance'] - $v['changemoney'];
                foreach ($changeType as $k2 => $v2) {
                    if ($v['changetype'] == $k2) {
                        $v['changename'] = $v2;
                        break;
                    }
                }
            }
            unset($v);
            return $this->apiReturn($res['code'], $res['data']['list'], $res['message'], $res['total'], $res['data']['sum']);
        }


        $this->assign('changeType', $changeType);
        return $this->fetch();
    }


    /**
     * Notes: 超级玩家列表
     * @return mixed
     */
    public function super()
    {
        if ($this->request->isAjax()) {
            $page   = intval(input('page')) ? intval(input('page')) : 1;
            $limit  = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId = intval(input('roleid')) ? intval(input('roleid')) : 0;

            $res = Api::getInstance()->sendRequest(['roleid' => $roleId, 'page' => $page, 'pagesize' => $limit], 'SuperUser', 'list');
            return $this->apiReturn($res['code'], $res['data']['ResultData']['list'], $res['message'], $res['data']['total'],
                [
                    $res['data']['ResultData']['totalinsum'],
                    $res['data']['ResultData']['totaloutsum'],
                ]);
        }
        return $this->fetch();
    }

    /**
     * Notes: 新增超级玩家
     * @return mixed
     */
    public function addSuper()
    {
        if ($this->request->isAjax()) {
            $request  = $this->request->request();
            $validate = validate('Player');
            $validate->scene('addSuper');
            if (!$validate->check($request)) {
                return $this->apiReturn(1, [], $validate->getError());
            }

            $res = Api::getInstance()->sendRequest(['roleid' => $request['roleid'], 'rate' => $request['rate']], 'SuperUser', 'add');
            //log记录
            GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
            return $this->apiReturn($res['code'], $res['data'], $res['message']);
        }
        return $this->fetch();
    }

    /**
     * Notes: 编辑超级玩家
     * @return mixed
     */
    public function editSuper()
    {
        if ($this->request->isAjax()) {
            $request  = $this->request->request();
            $validate = validate('Player');
            $validate->scene('editSuper');
            if (!$validate->check($request)) {
                return $this->apiReturn(1, [], $validate->getError());
            }
            $res = Api::getInstance()->sendRequest(['roleid' => $request['roleid'], 'rate' => $request['rate']], 'SuperUser', 'update');

            //log记录
            GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
            return $this->apiReturn($res['code'], $res['data'], $res['message']);
        }

        $roleid = input('roleid');
        $rate   = intval(input('rate')) ? intval(input('rate')) : 0;
        $this->assign('roleid', $roleid);
        $this->assign('rate', $rate);
        return $this->fetch();
    }

    /**
     * Notes: 删除超级玩家
     * @return mixed
     */
    public function deleteSuper()
    {
        $request  = $this->request->request();
        $validate = validate('Player');
        $validate->scene('deleteSuper');
        if (!$validate->check($request)) {
            return $this->apiReturn(1, [], $validate->getError());
        }
        $res = Api::getInstance()->sendRequest(['roleid' => $request['roleid']], 'SuperUser', 'delete');

        //log记录
        GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
        return $this->apiReturn($res['code'], $res['data'], $res['message']);
    }


    /**
     * 向玩家转账
     */
    public function transfer()
    {
        if ($this->request->isAjax()) {
            $page    = intval(input('page')) ? intval(input('page')) : 1;
            $limit   = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId  = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $start   = input('start') ? input('start') : '';
            $end     = input('end') ? input('end') : '';
            $classid = input('classid') ? input('classid') : -1;

            $data = ['page' => $page, 'pagesize' => $limit];
            if ($roleId) {
                $data['roleid'] = $roleId;
            }
            if ($classid && $classid != -1) {
                $data['classid'] = $classid;
            }
            if ($start) {
                $data['starttime'] = $start;
                if ($end) {
                    $data['endtime'] = $end;
                }
            }
            $res = Api::getInstance()->sendRequest($data, 'charge', 'list');
            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
        }
        return $this->fetch();
    }

    /**
     * 向玩家转账
     */
    public function addTransfer()
    {
        if ($this->request->isAjax()) {
            $request  = $this->request->request();
            $validate = validate('Player');
            $validate->scene('addTransfer');
            if (!$validate->check($request)) {
                return $this->apiReturn(1, [], $validate->getError());
            }

            //加锁
            $key = 'lock_addtransfer_'.$request['roleid'];
            if (!Redis::getInstance()->lock($key)) {
                return $this->apiReturn(2, [], '请勿重复操作');
            }

            $data   = [
                'roleid'     => $request['roleid'],
                'classid'    => $request['classid'],
                'totalmoney' => $request['totalmoney'],
                'uid'        => session('userid'),
                'adduser'    => session('username'),
                'descript'   => $request['descript'] ? $request['descript'] : ''
            ];
            $socket = new QuerySocket();
            $res    = $socket->addRoleMoney($data['roleid'], $data['totalmoney'] * 1000);
            if ($res['iResult'] == 0) {

                $res = Api::getInstance()->sendRequest($data, 'charge', 'add');
                //log记录
                GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
                Redis::getInstance()->rm($key);
                return $this->apiReturn($res['code'], $res['data'], $res['message']);
            }
            Redis::getInstance()->rm($key);
            return $this->apiReturn(3, [], '添加失败');
        }
        return $this->fetch();
    }
}
