<?php

namespace app\admin\controller;

use app\common\Config as ConfigModel;
use org\Auth;
use think\Controller;
use think\Db;
use think\Exception;
use think\Session;


class GameCfg extends Main
{
    protected $model = null;
    public function __construct()
    {
        parent::__construct();
        $this->model = new ConfigModel();
    }
    public function verifycode()
    {
        $list = $this->model->where('group', 'verify_code')->select();
        $list2 = $this->model->where('group', 'email')->select();
        $list3 = $this->model->where('group', 'game')->select();
        $this->assign('lists', $list);
        $this->assign('lists2', $list2);
        $this->assign('lists3', $list3);
        foreach ($list2 as &$v) {
            if ($v['content']) {
                $v['content'] = json_decode($v['content'], true);
            }
        }
        unset($v);
        return $this->fetch();
    }


    public function editCode()
    {
        if ($this->request->isPost()) {
            $data = $this->request->post();
            if ($data['codeid'] && $data['codekey']) {
                foreach ($this->model->all() as $v) {
                    if (isset($data[$v['name']])) {
                        $value = $data[$v['name']];
                        if (is_array($value) && isset($value['field'])) {
                            $value = json_encode(ConfigModel::getArrayData($value), JSON_UNESCAPED_UNICODE);
                        } else {
                            $value = is_array($value) ? implode(',', $value) : $value;
                        }
                        $v['value'] = $value;
                        $configList[] = $v->toArray();
                    }
                }
                $this->model->allowField(true)->saveAll($configList);
                try {
                    $this->refreshFile();
                } catch (Exception $e) {
                    $this->error($e->getMessage());
                }
                $this->success('success');
            }
        }
    }

    public function editEmail()
    {
        if ($this->request->isPost()) {
            $data = $this->request->post();
            if ($data) {
                foreach ($this->model->all() as $v) {
                    if (isset($data[$v['name']])) {
                        $value = $data[$v['name']];
                        if (is_array($value) && isset($value['field'])) {
                            $value = json_encode(ConfigModel::getArrayData($value), JSON_UNESCAPED_UNICODE);
                        } else {
                            $value = is_array($value) ? implode(',', $value) : $value;
                        }
                        $v['value'] = $value;
                        $configList[] = $v->toArray();
                    }
                }
                $this->model->allowField(true)->saveAll($configList);
                try {
                    $this->refreshFile();
                } catch (Exception $e) {
                    $this->error($e->getMessage());
                }
                $this->success('success');
            }
        }
    }
    public function editGame()
    {
        if ($this->request->isPost()) {
            $data = $this->request->post();
            if ($data) {
                foreach ($this->model->all() as $v) {
                    if (isset($data[$v['name']])) {
                        $value = $data[$v['name']];
                        if (is_array($value) && isset($value['field'])) {
                            $value = json_encode(ConfigModel::getArrayData($value), JSON_UNESCAPED_UNICODE);
                        } else {
                            $value = is_array($value) ? implode(',', $value) : $value;
                        }
                        $v['value'] = $value;
                        $configList[] = $v->toArray();
                    }
                }
                $this->model->allowField(true)->saveAll($configList);
                try {
                    $this->refreshFile();
                } catch (Exception $e) {
                    $this->error($e->getMessage());
                }
                $this->success('success');
            }
        }
    }

    /**
     * 刷新配置文件
     */
    protected function refreshFile()
    {
        $config = [];
        foreach ($this->model->all() as $k => $v) {

            $value = $v->toArray();
            if (in_array($value['type'], ['selects', 'checkbox', 'images', 'files'])) {
                $value['value'] = explode(',', $value['value']);
            }
            if ($value['type'] == 'array') {
                $value['value'] = (array)json_decode($value['value'], TRUE);
            }
            $config[$value['name']] = $value['value'];
        }
        file_put_contents(APP_PATH . 'extra' . DS . 'site.php', '<?php' . "\n\nreturn " . var_export($config, true) . ";");
    }
    public function add()
    {


    }


}