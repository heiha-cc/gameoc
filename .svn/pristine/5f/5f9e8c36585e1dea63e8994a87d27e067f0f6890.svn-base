<?php

namespace app\admin\controller;


use app\common\Api;
use app\common\GameLog;

/**
 * 支付通道
 */
class Gamemanage extends Main
{

    /**
     * 微信客服管理
     */
    public function weixin()
    {

        if ($this->request->isAjax()) {
            $limit = intval(input('limit')) ? intval(input('limit')) : 10;
            $page  = intval(input('page')) ? intval(input('page')) : 1;
            $res = Api::getInstance()->sendRequest(['page' => $page, 'pagesize' => $limit], 'system', 'wxvip');
            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
        }
        return $this->fetch();
    }

    /**
     * 新增微信
     */
    public function addWeixin()
    {
        if ($this->request->isAjax()) {
            $request  = $this->request->request();
//            $validate = validate('Payment');
//            $validate->scene('addChannel');
//            if (!$validate->check($request)) {
//                return $this->apiReturn(1, [], $validate->getError());
//            }
//            var weixinname = $.trim(data.field.weixinname),
//
//                    descript = $.trim(data.field.descript);
//                type=$('#type').val();

            $insert = [
                'weixinname' => $request['weixinname'] ? $request['weixinname'] : '',
                'type'       => $request['type'] ? $request['type'] : 0,
//                'appid'       => $request['appid'] ? $request['appid'] : '',
//                'noticeurl'   => $request['noticeurl'] ? $request['noticeurl'] : '',
                'noticetip'    => $request['noticetip'] ? $request['noticetip'] : '',
                'id'      =>  0,
            ];


            $res = Api::getInstance()->sendRequest($insert, 'system', 'addvip');

            //log记录
            GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
            return $this->apiReturn($res['code'], $res['data'], $res['message']);
        }
        return $this->fetch();
    }

    /**
     * Notes: 编辑微信
     * @return mixed
     */
    public function editWeixin()
    {
        if ($this->request->isAjax()) {
            $request  = $this->request->request();
//            $validate = validate('Payment');
//            $validate->scene('editChannel');
//            if (!$validate->check($request)) {
//                return $this->apiReturn(1, [], $validate->getError());
//            }
            $data = [
                'weixinname' => $request['weixinname'] ? $request['weixinname'] : '',
                'type'       => $request['type'] ? $request['type'] : 0,
                'noticetip'    => $request['noticetip'] ? $request['noticetip'] : '',
                'id'      =>  $request['id'] ? $request['id'] : 0,
            ];
            $res  = Api::getInstance()->sendRequest($data, 'system', 'addvip');

            //log记录
            GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
            return $this->apiReturn($res['code'], $res['data'], $res['message']);
        }


        $this->assign('id', input('id'));
        $this->assign('type', input('type') ? input('type') : '');
        $this->assign('weixinname', input('weixinname') ? input('weixinname') : '');
        $this->assign('noticetip', input('noticetip') ? input('noticetip') : '');
//        $this->assign('noticeurl', input('noticeurl') ? input('noticeurl') : '');
//        $this->assign('descript', input('descript') ? input('descript') : '');
        return $this->fetch();
    }

    /**
     * Notes: 删除微信
     * @return mixed
     */
    public function deleteWeixin()
    {
        $request  = $this->request->request();
//        $validate = validate('Payment');
//        $validate->scene('deleteChannel');
//        if (!$validate->check($request)) {
//            return $this->apiReturn(1, [], $validate->getError());
//        }
      //   var_dump($request['id']);die;

//        $res = Api::getInstance()->sendRequest(['id' => $request['id']], 'payment222', 'delchannel');
        $res = Api::getInstance()->sendRequest(['id' => $request['id']], 'system', 'delvip');


        //log记录
        GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
        return $this->apiReturn($res['code'], $res['data'], $res['message']);
    }
    /**
     * 黑名单设置
     */
    public function blacklist()
    {
        if ($this->request->isAjax()) {
            $limit = intval(input('limit')) ? intval(input('limit')) : 10;
            $page  = intval(input('page')) ? intval(input('page')) : 1;
            $roleid  = intval(input('roleid')) ? intval(input('roleid')) : 0;

            $res = Api::getInstance()->sendRequest(['page' => $page, 'pagesize' => $limit, 'roleid' => $roleid], 'payment', 'channel');
            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
        }
        return $this->fetch();
    }

    /**
     * 玩家id对应的ip
     */
    public function searchIpbyId()
    {
        if ($this->request->isAjax()) {
            $roleid2 = input('roleid2') ? input('roleid2') : 0;
            $limit = intval(input('limit')) ? intval(input('limit')) : 10;
            $page  = intval(input('page')) ? intval(input('page')) : 1;
            $roleid  = intval(input('roleid')) ? intval(input('roleid')) : 0;

            $res = Api::getInstance()->sendRequest(['page' => $page, 'pagesize' => $limit, 'roleid' => $roleid], 'payment', 'channel');
            $res['data']=$roleid2;
//            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
            return $this->apiReturn(0, $res['data'], $res['message'], $res['total']);
        }
        return $this->fetch();
    }

    /**
     * ip对应的玩家数量
     */
    public function searchPlayerNumbyIp()
    {
        if ($this->request->isAjax()) {
            $roleid3 = input('roleid3') ? input('roleid3') : 0;
            $limit = intval(input('limit')) ? intval(input('limit')) : 10;
            $page  = intval(input('page')) ? intval(input('page')) : 1;
            $roleid  = intval(input('roleid')) ? intval(input('roleid')) : 0;

            $res = Api::getInstance()->sendRequest(['page' => $page, 'pagesize' => $limit, 'roleid' => $roleid], 'payment', 'channel');
            $res['data']=$roleid3;
//            return $this->apiReturn($res['code'], $res['data'], $res['message'], $res['total']);
            return $this->apiReturn(0, $res['data'], $res['message'], $res['total']);
        }
        return $this->fetch();
    }

    /**
     * 新增ip/机器码
     */
    public function addIp()
    {
        if ($this->request->isAjax()) {
            $request  = $this->request->request();
//            $validate = validate('Payment');
//            $validate->scene('addChannel');
//            if (!$validate->check($request)) {
//                return $this->apiReturn(1, [], $validate->getError());
//            }

            $insert = [
                'operorid' => $request['operorid'],
                'mchid'       => $request['mchid'] ? $request['mchid'] : '',
//                'appid'       => $request['appid'] ? $request['appid'] : '',
//                'noticeurl'   => $request['noticeurl'] ? $request['noticeurl'] : '',
//                'descript'    => $request['descript'] ? $request['descript'] : '',
//                'status'      => 0
            ];


            $res = Api::getInstance()->sendRequest($insert, 'payment', 'addchannel');

            //log记录
            GameLog::logData(__METHOD__, $request, (isset($res['code']) && $res['code'] == 0) ? 1 : 0, $res);
            return $this->apiReturn($res['code'], $res['data'], $res['message']);
        }
        return $this->fetch();
    }

    /**
     * 游戏任务配置
     */
    public function task()
    {

        if ($this->request->isAjax()) {

            $page    = intval(input('page')) ? intval(input('page')) : 1;
            $limit   = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId  = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $roleId2 = intval(input('roleid2')) ? intval(input('roleid2')) : 0;
            if ($roleId2 > 0) {
                if (input('roleid') != null) {
                    if ($roleId <= 0) {
                        $roleId = 1;
                    }
                }

            }
            $start    = input('start') ? input('start') : '';
            $end      = input('end') ? input('end') : '';
            $payway   = intval(input('payway')) > 0 ? intval(input('payway')) : 0;
            $realname = input('realname') ? input('realname') : '';
            $data     = ['page' => $page, 'pagesize' => $limit, 'roleid' => $roleId, 'startdate' => $start, 'enddate' => $end, 'OperateVerifyType' => 0, 'payway' => $payway, 'realname' => $realname];
            $res      = Api::getInstance()->sendRequest($data, 'charge', 'outlist');
            return $this->apiReturn($res['code'], isset($res['data']['list']) ? $res['data']['list'] : [], $res['message'], $count = $res['total'], ['alltotal' => isset($res['data']['total']) ? $res['data']['total'] : 0]);

        }
        return $this->fetch();


    }

    /**
     * 游戏公告管理
     */
    public function notice()
    {

        if ($this->request->isAjax()) {

            $page    = intval(input('page')) ? intval(input('page')) : 1;
            $limit   = intval(input('limit')) ? intval(input('limit')) : 10;
            $roleId  = intval(input('roleid')) ? intval(input('roleid')) : 0;
            $roleId2 = intval(input('roleid2')) ? intval(input('roleid2')) : 0;
            if ($roleId2 > 0) {
                if (input('roleid') != null) {
                    if ($roleId <= 0) {
                        $roleId = 1;
                    }
                }

            }
            $start    = input('start') ? input('start') : '';
            $end      = input('end') ? input('end') : '';
            $payway   = intval(input('payway')) > 0 ? intval(input('payway')) : 0;
            $realname = input('realname') ? input('realname') : '';
            $data     = ['page' => $page, 'pagesize' => $limit, 'roleid' => $roleId, 'startdate' => $start, 'enddate' => $end, 'OperateVerifyType' => 0, 'payway' => $payway, 'realname' => $realname];
            $res      = Api::getInstance()->sendRequest($data, 'charge', 'outlist');
            return $this->apiReturn($res['code'], isset($res['data']['list']) ? $res['data']['list'] : [], $res['message'], $count = $res['total'], ['alltotal' => isset($res['data']['total']) ? $res['data']['total'] : 0]);

        }
        return $this->fetch();


    }


}
