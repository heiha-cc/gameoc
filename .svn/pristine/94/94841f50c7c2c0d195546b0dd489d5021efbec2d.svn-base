<?php

namespace app\admin\controller;

use app\common\GameLog;
use think\Controller;
use think\Db;
use app\model\User as userModel;

class User extends Controller
{
    /**
     * 首页
     */
    public function index()
    {
        return $this->fetch('login');
    }

    /**
     * 登录
     */
    public function login()
    {
        $this->checkLong();
        if (session('userid')) {
            $this->redirect('index/index');
        }

        $post = $this->request->post();

        if (empty($post)) {
            $this->redirect('user/index');
        }
        $validate = validate('User');
        $validate->scene('login');

        if (!$validate->check($post)) {
            $this->error($validate->getError());
        } else {
            //判断验证码
            $username  = $post['username'];
            $mobile    = $post['mobile'];
            $userModel = new userModel();
            $userInfo  = $userModel->getRow(['username' => $username, 'mobile' => $mobile]);
            if (!$userInfo) {
                $this->error('账号或手机号有误');
            }

            if (md5($userInfo['salt'] . $post['password']) !== $userInfo['password']) {
                $this->error('密码错误');
            } else {
                session('username', $userInfo['username']);
                session('userid', $userInfo['id']);
                if ($post['remember'] == 1) {//记住我
                    //盐
                    $salt = random_str(16);
                    //第二分身标识
                    $identifier = md5($salt . $userInfo['username'] . $salt);
                    //永久登录标识
                    $token = md5(uniqid(rand(), true));
                    //永久登录超时时间(1周)
                    $expire = 7*24*3600;
                    $timeout = time()+$expire;
                    //存入cookie
                    cookie('auth',"$identifier:$token",$expire);
                    Db::name('user')
                        ->where('username', $post['username'])
                        ->update([
                            'last_login_ip' => $_SERVER['REMOTE_ADDR'],
                            'last_login_time' => date('Y-m-d h:i:s', time()),
                            'token' => $token,
                            'identifier' => $identifier,
                            'timeout' => $timeout,
                            'session_id' => session_id()
                        ]);
                } else {
                    Db::name('user')
                        ->where('username', $post['username'])
                        ->update([
                            'last_login_ip' => $_SERVER['REMOTE_ADDR'],
                            'last_login_time' => date('Y-m-d h:i:s', time()),
                            'session_id' => session_id()
                        ]);
                }
                $this->success('登陆成功', 'index/index');
            }
        }
    }


    //是否记住我
    public function checkLong(){
        $isLong = $this->checkRemember();
        if($isLong === false){

        }else{
            session("username",$isLong['username']);
            session("userid",$isLong['id']);
        }
    }

    //验证用户是否永久登录（记住我）
    public function checkRemember(){
        $arr = array();
        $now = time();
        $auth = cookie('auth');
        if (!$auth) {
            return false;
        }
        list($identifier,$token) = explode(':',$auth);

        if (ctype_alnum($identifier) && ctype_alnum($token)){
            $arr['identifier'] = $identifier;
            $arr['token'] = $token;
        }else{
            return false;
        }

        $userModel = new userModel();
        $info = $userModel->getRow(['identifier' => $arr['identifier']]);
        if($info != null){
            if($arr['token'] != $info['token']){
                return false;
            }else if($now > $info['timeout']){
                return false;
            }else{
                return $info;
            }
        }else{
            return false;
        }
    }

    //注销
    public function logOut()
    {
        session('username', null);
        session('userid', null);
        session(null);
        cookie('username', null);
        cookie('auth', null);
        $this->redirect('admin/user/index');
    }

    public function userlist()
    {
        $where    = [];
        $username = '';
        if ($this->request->get('username')) {
            $where['a.username'] = ['like', '%' . trim($this->request->get('username')) . '%'];
            $username          = $this->request->get('username');
        }
        $data = Db::name('User')
            ->alias('a')
            ->join('game_auth_group_access b', 'b.uid=a.id', 'LEFT')
            ->join('game_auth_group c', 'c.id=b.group_id')
            ->field('a.username, a.id, a.mobile, a.status, a.create_time, a.last_login_time, c.title')
            ->where($where)
            ->order('id asc')
            ->paginate(15, false, [
                'type'     => 'Layui',
                'var_page' => 'page',
                'path'     => 'javascript:searchUser([PAGE],"' . $username . '")',
                //'query'     => $this->request->param()
            ]);

        if ($this->request->get('page')) {
            return json(['code' => 0, 'data' => $data, 'pages' => $data->render()]);
        }
        $this->assign('users', $data);
        $this->assign('username', $username);
        return $this->fetch();
    }

    //增加用户
    public function addUser()
    {
        $request = $this->request;
        if ($request->isPost()) {
            $post     = $request->post();
            $group_id = $post['group_id'];
            unset($post['group_id']);
            $validate = validate('User');
            $res      = $validate->check($post);
            if ($res !== true) {
                $this->error($validate->getError());
            } else {

                unset($post['check_password']);
                $salt                  = generateSalt();
                $post['password']      = md5($salt . $post['password']);
                $post['salt']          = $salt;
                $post['last_login_ip'] = '0.0.0.0';
                $post['create_time']   = date('Y-m-d h:i:s', time());
                $db                    = Db::name('user')->insert($post);
                $userId                = Db::name('user')->getLastInsID();
                Db::name('auth_group_access')
                    ->insert(['uid' => $userId, 'group_id' => $group_id]);


                $logData = [
                    'userid'     => session('userid'),
                    'username'   => session('username'),
                    'action'     => __METHOD__,
                    'request'    => json_encode($post),
                    'logday'     => date('Ymd'),
                    'recordtime' => date('Y-m-d H:i:s'),
                    'status'     => 1
                ];
                GameLog::log($logData);
                $this->success('success');
            }
        } else {
            $auth_group = Db::name('auth_group')
                ->field('id,title')
                ->where('status', 1)
                ->order('id desc')
                ->select();
            return $this->fetch('add', ['auth_group' => $auth_group]);
        }

    }

    //编辑提交
    public function editUser($id)
    {
        $request = $this->request;
        if ($request->isPost()) {
            $post = $this->request->post();
            if ($post['id'] == 1) {
                if (session('userid') !== 1) $this->error('系统管理员无法修改');
            }
            $group_id = $post['group_id'];
            unset($post['group_id']);
            $validate = validate('User');
            if (empty($post['password']) && empty($post['check_password'])) {
                $res = $validate->scene('edit')->check($post);
                if ($res !== true) {
                    $this->error($validate->getError());
                } else {
                    unset($post['password']);
                    unset($post['check_password']);

                    $db = Db::name('user')
                        ->where('id', $post['id'])
                        ->update(
                            [
                                'username' => $post['username'],
                                'mobile'   => $post['mobile'],
                            ]);
                    Db::name('auth_group_access')
                        ->where('uid', $post['id'])
                        ->update(['group_id' => $group_id]);

                    $logData = [
                        'userid'     => session('userid'),
                        'username'   => session('username'),
                        'action'     => __METHOD__,
                        'request'    => json_encode($post),
                        'logday'     => date('Ymd'),
                        'recordtime' => date('Y-m-d H:i:s'),
                        'status'     => 1
                    ];
                    GameLog::log($logData);
                    $this->success('编辑成功');
                }
            } else {
                $res = $validate->scene('editPassword')->check($post);
                if ($res !== true) {
                    $this->error($validate->getError());
                } else {
                    $logData = [
                        'userid'     => session('userid'),
                        'username'   => session('username'),
                        'action'     => __METHOD__,
                        'request'    => json_encode($post),
                        'logday'     => date('Ymd'),
                        'recordtime' => date('Y-m-d H:i:s'),
                        'status'     => 1
                    ];

                    unset($post['check_password']);
                    $salt             = generateSalt();
                    $post['password'] = md5($salt . $post['password']);
                    $post['salt']     = $salt;
                    $db               = Db::name('user')
                        ->where('id', $post['id'])
                        ->update($post);
                    GameLog::log($logData);
                    $this->success('编辑成功');
                }
            }
        } else {
            $data       = Db::name('User')
                ->alias('a')
                ->join('auth_group_access b', 'b.uid=a.id', 'left')
                ->field('a.*,b.group_id')
                ->where('id', $id)
                ->find();
            $auth_group = Db::name('auth_group')
                ->field('id,title')
                ->order('id desc')
                ->select();
            $this->assign('auth_group', $auth_group);
            $this->assign('data', $data);
            return $this->fetch('edit');
        }

    }

    //删除用户
    public function deleteUser()
    {
        $id       = $this->request->post('id');
        $username = Db::name('user')
            ->where('id', $id)
            ->value('username');
        if ((int)$id !== 1) {
            if ($username !== session('username')) {
                $db      = Db::name('user')
                    ->where('id', $id)
                    ->delete();
                $logData = [
                    'userid'     => session('userid'),
                    'username'   => session('username'),
                    'action'     => __METHOD__,
                    'request'    => json_encode($this->request->post()),
                    'logday'     => date('Ymd'),
                    'recordtime' => date('Y-m-d H:i:s'),
                    'status'     => 1
                ];
                GameLog::log($logData);
                $this->success('删除成功');
            } else {
                $this->error('无法删除当前登录用户');
            }
        } else {
            $this->error('超级管理员无法删除');
        }
    }
}
